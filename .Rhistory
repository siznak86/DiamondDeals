"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(FreeAgency2023)
View(FreeAgency2019)
library(dplyr)
## Import Free Agency Years Data Sets make sure to change YRS, DOLLARS, AVG. SALARY to numeric
## Creating Player IDs
# Creating a Unified Data Set
FreeAgencyTotal <- bind_rows(FreeAgency2019, FreeAgency2020, FreeAgency2021, FreeAgency2022, FreeAgency2023)
# Dropping all Columns but Player Names
FreeAgencyPlayerNames <- select(FreeAgencyTotal, PLAYER)
# Removing All Duplicate Players
FreeAgencyPlayerNames <- distinct(FreeAgencyPlayerNames, PLAYER, .keep_all = TRUE)
# Adding a Player ID Column
FreeAgencyPlayerNames <- FreeAgencyPlayerNames %>%
arrange(PLAYER) %>%
mutate(PlayerID = row_number())
# Moving Player ID to First Column
FreeAgencyPlayerNames <- FreeAgencyPlayerNames %>%
select(PlayerID, everything())
## Adding Player ID to existing Data Sets
# Joining data based on Player and ID
FreeAgencyTotal <- left_join(FreeAgencyTotal, select(FreeAgencyPlayerNames, PLAYER, PlayerID), by = "PLAYER")
# Moving Player ID to First Column
FreeAgencyTotal <- FreeAgencyTotal %>%
select(PlayerID, everything())
## Creating Dummy Values
FreeAgencyTotal <- FreeAgencyTotal %>%
mutate(DummyPos = case_when(
POS. %in% c("RP", "SP", "P") ~ 1,
POS. %in% c("C", "1B", "2B", "3B", "SS") ~ 2,
POS. %in% c("LF", "CF", "RF", "OF") ~ 3,
POS. %in% c("DH") ~ 4,
TRUE ~ NA_integer_
))
## Saving Free Agency Total Data Set
write.csv(FreeAgencyTotal, "FreeAgencyTotal.csv", row.names = FALSE)
## Creating Pitching and Position Data Sets
# Separating out just Pitchers
FreeAgencyERA <- FreeAgencyTotal[FreeAgencyTotal$DummyPos == 1, ]
# Removing Hitting Statistics
FreeAgencyERA <- FreeAgencyERA %>% select(-H, -RBI, -HR, -AVG, -OPS)
# Removing NA Salaries
FreeAgencyERA <- FreeAgencyERA[!is.na(FreeAgencyERA$`AVG. SALARY`), ]
# Dropping NA WAR
FreeAgencyERA <- FreeAgencyERA[!is.na(FreeAgencyERA$WAR), ]
# Changing Saves NA to 0
FreeAgencyERA <- FreeAgencyERA %>%
mutate(SV = ifelse(is.na(SV), 0, SV))
# Changing ERA NA to 0
FreeAgencyERA <- FreeAgencyERA %>%
mutate(ERA = ifelse(is.na(ERA), 0, ERA))
# Changing WHIP NA to 0
FreeAgencyERA <- FreeAgencyERA %>%
mutate(WHIP = ifelse(is.na(WHIP), 0, WHIP))
## Saving Free Agency ERA Data Set
write.csv(FreeAgencyERA, "FreeAgencyERA.csv", row.names = FALSE)
# Separating out Position Players
# Removing Pitchers, Column and value to remove
column_to_check <- "DummyPos"
value_to_remove <- 1
# Identify rows where the specified value is present in the specified column
rows_to_remove <- FreeAgencyTotal[, column_to_check] == value_to_remove
FreeAgencyOPS <- FreeAgencyTotal[!rows_to_remove, ]
#separating just batting stats
FreeAgencyOPS <- FreeAgencyOPS %>% select(-IP, -ERA, -WHIP, -W, -SV)
# Removing NA Salaries
FreeAgencyOPS <- FreeAgencyOPS[!is.na(FreeAgencyOPS$`AVG. SALARY`), ]
# Dropping NA WAR
FreeAgencyOPS <- FreeAgencyOPS[!is.na(FreeAgencyOPS$WAR), ]
# Changing AVG NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(AVG = ifelse(is.na(AVG), 0, AVG))
# Changing HR NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(HR = ifelse(is.na(HR), 0, HR))
# Changing RBI NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(RBI = ifelse(is.na(RBI), 0, RBI))
# Changing H NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(H = ifelse(is.na(H), 0, H))
## Saving Free Agency OPS Data Set
write.csv(FreeAgencyOPS, "FreeAgencyOPS.csv", row.names = FALSE)
View(FreeAgencyPlayerNames)
View(FreeAgencyTotal)
View(FreeAgencyOPS)
View(FreeAgencyERA)
library(corrplot)
## Correlation Plots
# ERA
correlation_matrix_ERA <- cor(FreeAgencyERA[, c("AGE", "YRS", "AVG. SAlARY", "ERA", "IP", "WHIP","W", "SV", "WAR")])
## Correlation Plots
# ERA
correlation_matrix_ERA <- cor(FreeAgencyERA[, c("AGE", "YRS", "AVG. SALARY", "ERA", "IP", "WHIP","W", "SV", "WAR")])
corrplot(correlation_matrix_ERA, method = "color", type = "full", tl.col = "black", tl.srt = 45, is.corr = TRUE, addCoef.col = "black", main="Correlation Plot - ERA")
# OPS
correlation_matrix_OPS <- cor(FreeAgencyOPS[, c("AGE", "YRS", "AVG. SALARY", "OPS", "WAR", "dummy_Pos", "H", "RBI", "HR", "AVG")])
corrplot(correlation_matrix_OPS, method = "color", type = "full", tl.col = "black", tl.srt = 45, is.corr = TRUE, addCoef.col = "black", main="Correlation Plot - OPS")
# OPS
correlation_matrix_OPS <- cor(FreeAgencyOPS[, c("AGE", "YRS", "AVG. SALARY", "OPS", "WAR", "H", "RBI", "HR", "AVG")])
corrplot(correlation_matrix_OPS, method = "color", type = "full", tl.col = "black", tl.srt = 45, is.corr = TRUE, addCoef.col = "black", main="Correlation Plot - OPS")
# Advance Positions
FreeAgencyTotal <- FreeAgencyTotal %>%
mutate(PosNumber = case_when(
POS. %in% c("RP", "SP", "P") ~ 1,
POS. %in% c("C") ~ 2,
POS. %in% c("1B") ~ 3,
POS. %in% c("2B") ~ 4,
POS. %in% c("3B") ~ 5,
POS. %in% c("SS") ~ 6,
POS. %in% c("LF") ~ 7,
POS. %in% c("CF") ~ 8,
POS. %in% c("RF") ~ 9,
POS. %in% c("DH") ~ 10,
TRUE ~ NA_integer_
))
FreeAgencyTotal <- FreeAgencyTotal %>%
mutate(PosNumber = case_when(
POS. %in% c("RP", "SP", "P") ~ 1,
POS. %in% c("C") ~ 2,
POS. %in% c("1B") ~ 3,
POS. %in% c("2B") ~ 4,
POS. %in% c("3B") ~ 5,
POS. %in% c("SS") ~ 6,
POS. %in% c("LF", "OF") ~ 7,
POS. %in% c("CF") ~ 8,
POS. %in% c("RF") ~ 9,
POS. %in% c("DH") ~ 10,
TRUE ~ NA_integer_
))
## Saving Free Agency Total Data Set
write.csv(FreeAgencyTotal, "FreeAgencyTotal.csv", row.names = FALSE)
## Creating Pitching and Position Data Sets
# Separating out just Pitchers
FreeAgencyERA <- FreeAgencyTotal[FreeAgencyTotal$DummyPos == 1, ]
# Removing Hitting Statistics
FreeAgencyERA <- FreeAgencyERA %>% select(-H, -RBI, -HR, -AVG, -OPS)
# Removing NA Salaries
FreeAgencyERA <- FreeAgencyERA[!is.na(FreeAgencyERA$`AVG. SALARY`), ]
# Dropping NA WAR
FreeAgencyERA <- FreeAgencyERA[!is.na(FreeAgencyERA$WAR), ]
# Changing Saves NA to 0
FreeAgencyERA <- FreeAgencyERA %>%
mutate(SV = ifelse(is.na(SV), 0, SV))
# Changing ERA NA to 0
FreeAgencyERA <- FreeAgencyERA %>%
mutate(ERA = ifelse(is.na(ERA), 0, ERA))
# Changing WHIP NA to 0
FreeAgencyERA <- FreeAgencyERA %>%
mutate(WHIP = ifelse(is.na(WHIP), 0, WHIP))
## Saving Free Agency ERA Data Set
write.csv(FreeAgencyERA, "FreeAgencyERA.csv", row.names = FALSE)
# Separating out Position Players
# Removing Pitchers, Column and value to remove
column_to_check <- "DummyPos"
value_to_remove <- 1
# Identify rows where the specified value is present in the specified column
rows_to_remove <- FreeAgencyTotal[, column_to_check] == value_to_remove
FreeAgencyOPS <- FreeAgencyTotal[!rows_to_remove, ]
#separating just batting stats
FreeAgencyOPS <- FreeAgencyOPS %>% select(-IP, -ERA, -WHIP, -W, -SV)
# Removing NA Salaries
FreeAgencyOPS <- FreeAgencyOPS[!is.na(FreeAgencyOPS$`AVG. SALARY`), ]
# Dropping NA WAR
FreeAgencyOPS <- FreeAgencyOPS[!is.na(FreeAgencyOPS$WAR), ]
# Changing AVG NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(AVG = ifelse(is.na(AVG), 0, AVG))
# Changing HR NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(HR = ifelse(is.na(HR), 0, HR))
# Changing RBI NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(RBI = ifelse(is.na(RBI), 0, RBI))
# Changing H NA to 0
FreeAgencyOPS <- FreeAgencyOPS %>%
mutate(H = ifelse(is.na(H), 0, H))
## Saving Free Agency OPS Data Set
write.csv(FreeAgencyOPS, "FreeAgencyOPS.csv", row.names = FALSE)
# OPS
correlation_matrix_OPS <- cor(FreeAgencyOPS[, c("AGE", "YRS", "AVG. SALARY", "OPS", "WAR", "H", "RBI", "HR", "AVG", "PosNumber")])
corrplot(correlation_matrix_OPS, method = "color", type = "full", tl.col = "black", tl.srt = 45, is.corr = TRUE, addCoef.col = "black", main="Correlation Plot - OPS")
library(ggplot2)
## Scatter Plots
# Scatter Plot ERA vs. Salary
ggplot(FreeAgencyERA, aes(x = ERA, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: ERA V. Free Agent Salary", x = "ERA", y = "Salary")
# Scatter Plot ERA vs. Contract Years
ggplot(FreeAgencyERA, aes(x = ERA, y = YRS)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: ERA V. Free Agent Salary", x = "ERA", y = "Years")
# Scatter Plot Age vs. Salary
ggplot(FreeAgencyERA, aes(x = AGE, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: ERA V. Free Agent Salary", x = "ERA", y = "Salary")
# Scatter Plot Age vs. Salary
ggplot(FreeAgencyERA, aes(x = AGE, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: ERA V. Free Agent Salary", x = "Age", y = "Salary")
# Scatter Plot Age vs. Salary
ggplot(FreeAgencyERA, aes(x = AGE, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: ERA V. Free Agent Salary", x = "Age", y = "Salary")
# Scatter Plot  vs. Salary
ggplot(FreeAgencyERA, aes(x = YRS, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: Years V. Free Agent Salary", x = "Years", y = "Salary")
# Scatter Plot Innings Pitched vs. Salary
ggplot(FreeAgencyERA, aes(x = IP, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: Innings Pitched V. Free Agent Salary", x = "IP", y = "Salary")
# Scatter Plot WHIP vs. Salary
ggplot(FreeAgencyERA, aes(x = WHIP, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: WHIP V. Free Agent Salary", x = "WHIP", y = "Salary")
# Scatter Plot Wins vs. Salary
ggplot(FreeAgencyERA, aes(x = W, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: Wins V. Free Agent Salary", x = "Wins", y = "Salary")
# Scatter Plot Saves vs. Salary
ggplot(FreeAgencyERA, aes(x = SV, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: Saves V. Free Agent Salary", x = "Saves", y = "Salary")
# Scatter Plot WAR vs. Salary
ggplot(FreeAgencyERA, aes(x = WAR, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "ERA: WAR V. Free Agent Salary", x = "WAR", y = "Salary")
# OPS
# Scatter Plot Age vs. Salary
ggplot(FreeAgencyOPS, aes(x = AGE, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: AGE V. Free Agent Salary", x = "Age", y = "Salary")
# Scatter Plot  Years vs. Salary
ggplot(FreeAgencyOPS, aes(x = YRS, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: Years V. Free Agent Salary", x = "Years", y = "Salary")
# Scatter Plot OPS vs. Salary
ggplot(FreeAgencyOPS, aes(x = OPS, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: OPS V. Free Agent Salary", x = "ERA", y = "Salary")
# Scatter Plot OPS vs. Salary
ggplot(FreeAgencyOPS, aes(x = OPS, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: OPS V. Free Agent Salary", x = "OPS", y = "Salary")
# Scatter Plot Hits vs. Salary
ggplot(FreeAgencyOPS, aes(x = H, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: Hits V. Free Agent Salary", x = "Hits", y = "Salary")
# Scatter Plot RBIs vs. Salary
ggplot(FreeAgencyOPS, aes(x = RBI, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: RBIs V. Free Agent Salary", x = "RBI", y = "Salary")
# Scatter Plot Home Runs vs. Salary
ggplot(FreeAgencyOPS, aes(x = HR, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: Home Runs V. Free Agent Salary", x = "Home Runs", y = "Salary")
# Scatter Plot Average vs. Salary
ggplot(FreeAgencyOPS, aes(x = AVG, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: Batting Average V. Free Agent Salary", x = "Average", y = "Salary")
# Scatter Plot WAR vs. Salary
ggplot(FreeAgencyOPS, aes(x = WAR, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: WAR V. Free Agent Salary", x = "WAR", y = "Salary")
# Scatter Plot Position vs. Salary
ggplot(FreeAgencyOPS, aes(x = PosNumber, y = `AVG. SALARY`)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "OPS: Position V. Free Agent Salary", x = "Position", y = "Salary")
## Regressions
# Multiple Linear Regression
model_ERA_multiLinear <- lm(`AVG. SALARY` ~ ERA + WAR + IP + WHIP + W + SV, data = FreeAgencyERA)
summary(model_ERA_multiLinear)
predictions_ERA <- predict(model_ERA_multiLinear, newdata = FreeAgencyERA)
plot(model_ERA_multiLinear, which = 1)
model_OPS_multiLinear <- lm(`AVG. SALARY` ~ OPS + WAR + H + RBI + HR + AVG, data = FreeAgencyOPS)
summary(model_OPS_multiLinear)
predictions_OPS <- predict(model_OPS_multiLinear, newdata = FreeAgencyOPS)
plot(model_OPS_multiLinear, which = 1)
# Stepwise Mulitnomial Logistic Regression
model_OPS_stepwise <- multinom(`AVG. SALARY` ~ PosNumber, data = FreeAgencyOPS)
library(nnet)
# Stepwise Mulitnomial Logistic Regression
model_OPS_stepwise <- multinom(`AVG. SALARY` ~ PosNumber, data = FreeAgencyOPS)
step_model_Pos <- step(model_OPS_stepwise)
summary(step_model_Pos)
# Multiple Linear Regression OPS
model_OPS_multiLinear <- lm(`AVG. SALARY` ~ OPS + WAR + H + RBI + HR + AVG + PosNumber, data = FreeAgencyOPS)
summary(model_OPS_multiLinear)
predictions_OPS <- predict(model_OPS_multiLinear, newdata = FreeAgencyOPS)
plot(model_OPS_multiLinear, which = 1)
model_ERA_multiLinear <- lm(`AVG. SALARY` ~ ERA + WAR + IP + WHIP + W + SV, data = FreeAgencyERA)
summary(model_ERA_multiLinear)
reticulate::repl_python()
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
View(FreeAgencyERA)
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA), direction = "both")
# Mediation analysis
mediation_model_ERA <- lm(AGE ~ ERA, data = FreeAgencyERA)
mediate_model_ERA <- mediate(mediation_model_ERA, `AVG. SALARY` ~ ERA)
library(corrplot)
library(ggplot2)
library(nnet)
library(mediation)
library(moderndive)
mediate_model_ERA <- mediate(mediation_model_ERA, `AVG. SALARY` ~ ERA)
mediate_model_ERA <- mediate(mediation_model_ERA, '`AVG. SALARY`' ~ ERA)
mediate_model_ERA <- mediate(mediation_model_ERA, "`AVG. SALARY`" ~ ERA)
mediate_model_ERA <- mediate(mediation_model_ERA, `AVG. SALARY` ~ ERA)
# Moderation analysis
moderation_model_ERA <- lm(`AVG. SALARY` ~ ERA * SV, data = FreeAgencyERA)
# Display results
summary(step_model_ERA)
summary(mediation_model_ERA)
summary(mediate_model_ERA)
summary(moderation_model_ERA)
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA), direction = "both")
## Dropping Erroneous Columns
drop <- c("POS", "BATS", "THROWS", "FROM", "TO")
FreeAgencyERA = mydata[,!(names(mydata) %in% drop)]
FreeAgencyERA = FreeAgencyERA[,!(names(FreeAgencyERA) %in% drop)]
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA), direction = "both")
# Mediation analysis
mediation_model_ERA <- lm(AGE ~ ERA, data = FreeAgencyERA)
mediate_model_ERA <- mediate(mediation_model_ERA, `AVG. SALARY` ~ ERA)
# Moderation analysis
moderation_model_ERA <- lm(`AVG. SALARY` ~ ERA * SV, data = FreeAgencyERA)
# Display results
summary(step_model_ERA)
summary(mediation_model_ERA)
summary(mediate_model_ERA)
summary(moderation_model_ERA)
## Saving Free Agency ERA Data Set
write.csv(FreeAgencyERA, "FreeAgencyERA.csv", row.names = FALSE)
## Dropping Erroneous Columns
drop <- c("POS", "BATS", "THROWS", "FROM", "TO")
FreeAgencyERA = FreeAgencyERA[,!(names(FreeAgencyERA) %in% drop)]
FreeAgencyOPS = FreeAgencyOPS[,!(names(FreeAgencyOPS) %in% drop)]
## Saving Free Agency OPS Data Set
write.csv(FreeAgencyOPS, "FreeAgencyOPS.csv", row.names = FALSE)
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA), direction = "both", trace = 0)
# Display results
summary(step_model_ERA)
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA))
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step_lm(`AVG. SALARY` ~ ., data = FreeAgencyERA)
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA), direction = "both", trace = 0)
## Check for mediation and moderation while running stepwise linear regression
# Stepwise linear regression
step_model_ERA <- step(lm(`AVG. SALARY` ~ ., data = FreeAgencyERA), direction = "both")
## Regressions
# Multiple Linear Regression ERA
model_ERA_multiLinear <- lm(`AVG. SALARY` ~ ERA + WAR + IP + WHIP + W + SV, data = FreeAgencyERA)
summary(model_ERA_multiLinear)
interaction_plot <- ggplot(new_data, aes(x = AGE, y = pred, color = factor(SV))) +
geom_line() +
labs(title = "Interaction Effect: AGE and SV on AVG. SALARY",
x = "AGE",
y = "Predicted AVG. SALARY",
color = "SV") +
theme_minimal()
library(ggplotify)
install.packages("ggplotify")
library(ggplotify)
interaction_plot <- ggplot(new_data, aes(x = AGE, y = pred, color = factor(SV))) +
geom_line() +
labs(title = "Interaction Effect: AGE and SV on AVG. SALARY",
x = "AGE",
y = "Predicted AVG. SALARY",
color = "SV") +
theme_minimal()
new_data <- expand.grid(AGE = seq(min(FreeAgencyERA$AGE), max(FreeAgencyERA$AGE), length.out = 100),
SV = seq(min(FreeAgencyERA$SV), max(FreeAgencyERA$SV), length.out = 100))
interaction_plot <- ggplot(new_data, aes(x = AGE, y = pred, color = factor(SV))) +
geom_line() +
labs(title = "Interaction Effect: AGE and SV on AVG. SALARY",
x = "AGE",
y = "Predicted AVG. SALARY",
color = "SV") +
theme_minimal()
interaction_plot
plot(model_ERA_multiLinear, which = 1)
interact_plot(model_ERA_multiLinear, which = 1)
library(jtools)
install.packages("jtools")
library(jtools)
interact_plot(model_ERA_multiLinear, which = 1)
interact_plot(model_ERA_multiLinear, which = 1)
plot(model_ERA_multiLinear, which = 1)
plot(model_ERA_multiLinear$fitted.values, model_ERA_multiLinear$residuals,
xlab = "Predicted values", ylab = "Residuals")
abline(h = 0, col = "red")
# Multiple Linear Regression OPS
model_OPS_multiLinear <- lm(`AVG. SALARY` ~ OPS + WAR + H + RBI + HR + AVG + PosNumber, data = FreeAgencyOPS)
summary(model_OPS_multiLinear)
predictions_OPS <- predict(model_OPS_multiLinear, newdata = FreeAgencyOPS)
plot(model_OPS_multiLinear, which = 1)
plot(model_OPS_multiLinear$fitted.values, model_OPS_multiLinear$residuals,
xlab = "Predicted values", ylab = "Residuals")
plot(model_OPS_multiLinear$fitted.values, model_OPS_multiLinear$residuals,
xlab = "Predicted values", ylab = "Residuals")
abline(h = 0, col = "red")
library(forecast)
install.packages("forecast")
library(forecast)
Acf(model_ERA_multiLinear$residuals, main = "ACF of Model Residuals")
# Homoscedasticity
plot(model_ERA_multiLinear$fitted.values, abs(model_ERA_multiLinear$residuals),
xlab = "Predicted values", ylab = "Absolute Residuals")
# Normality of Errors
qqnorm(model_ERA_multiLinear$residuals)
qqline(model_ERA_multiLinear$residuals)
library(car)
library(car)
# Absence of Multicollinearity
vif(model_ERA_multiLinear)
# No Influential Outliers
threshold <- 4/length(cooksd)
library(corrplot)
library(ggplot2)
library(ggplotify)
library(nnet)
library(mediation)
library(moderndive)
library(readxl)
library(interactions)
install.packages("interactions")
library(corrplot)
library(ggplot2)
library(ggplotify)
library(nnet)
library(mediation)
library(moderndive)
library(readxl)
library(interactions)
library(jtools)
library(forecast)
library(car)
# No Influential Outliers
threshold <- 4/length(cooksd)
threshold <- 4/length(cooksd)
# No Influential Outliers
cooksd <- cooks.distance(model_ERA_multiLinear)
threshold <- 4/length(cooksd)
yrange <- c(0, max(cooksd, threshold) * 1.1)
plot(cooksd, ylim = yrange, main = "Influential Observations by Cook's distance", pch = 16)
abline(h = threshold, col = "red")
plot(model_ERA_multiLinear)
## Regressions
# Multiple Linear Regression ERA
model_ERA_multiLinear <- lm(`AVG. SALARY` ~ ERA + WAR + IP + WHIP + W + SV, data = FreeAgencyERA)
summary(model_ERA_multiLinear)
#Significance found in all except IP
predictions_ERA <- predict(model_ERA_multiLinear, newdata = FreeAgencyERA)
plot(model_ERA_multiLinear)
# Independence of Residuals
Acf(model_ERA_multiLinear$residuals, main = "ACF of Model Residuals")
# Homoscedasticity
plot(model_ERA_multiLinear$fitted.values, abs(model_ERA_multiLinear$residuals),
xlab = "Predicted values", ylab = "Absolute Residuals")
# Normality of Errors
qqnorm(model_ERA_multiLinear$residuals)
qqline(model_ERA_multiLinear$residuals)
# Absence of Multicollinearity
vif(model_ERA_multiLinear)
# No Influential Outliers
cooksd <- cooks.distance(model_ERA_multiLinear)
threshold <- 4/length(cooksd)
yrange <- c(0, max(cooksd, threshold) * 1.1)
plot(cooksd, ylim = yrange, main = "Influential Observations by Cook's distance", pch = 16)
abline(h = threshold, col = "red")
predictions_ERA <- predict(model_ERA_multiLinear, newdata = FreeAgencyERA)
plot(model_ERA_multiLinear)
